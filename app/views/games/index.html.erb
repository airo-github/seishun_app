<!DOCTYPE html>
<html>
<head>
  <title>青春逃避ゲーム</title>
</head>
<body>
  <canvas id="gameCanvas" width="400" height="400" style="border: 1px solid black;"></canvas>
  <button id="startButton">スタート</button>
  <div id="instructions">
    <p>赤：プレイヤー　青春：敵</p>
    <p>Vim操作で青春から逃げてください</p>
    <p>操作方法：</p>
    <p>h: 左に移動</p>
    <p>j: 下に移動</p>
    <p>k: 上に移動</p>
    <p>l: 右に移動</p>
  </div>
  <div id="result" style="display: none;">
    <p id="scoreDisplay"></p>
    <a id="twitterLink" href="#" target="_blank" style="display: none;">ツイッターで結果をシェア</a>
    <button id="restartButton">リスタート</button>
  </div>

  <script>
    // ゲームの変数
    let playerX = 200;
    let playerY = 200;
    let playerSize = 20;
    let aoseiX;
    let aoseiY;
    let aoseiSize = 20;
    let aoseiSpeedX;
    let aoseiSpeedY;
    let score = 0;
    let isGameStarted = false;

    // ゲームキャンバスの取得
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    // キー入力を受け取るイベントリスナーの設定
    document.addEventListener('keydown', function(event) {
      if (isGameStarted) {
        const key = event.key;
        if (key === 'h' && playerX > 0) {
          playerX -= 10;
        } else if (key === 'j' && playerY < canvas.height - playerSize) {
          playerY += 10;
        } else if (key === 'k' && playerY > 0) {
          playerY -= 10;
        } else if (key === 'l' && playerX < canvas.width - playerSize) {
          playerX += 10;
        }
      }
    });

    // スタートボタンのクリックイベントリスナーを設定
    const startButton = document.getElementById('startButton');
    const instructionsDiv = document.getElementById('instructions');
    const resultDiv = document.getElementById('result');
    const scoreDisplay = document.getElementById('scoreDisplay');
    const twitterLink = document.getElementById('twitterLink');

    startButton.addEventListener('click', function() {
      isGameStarted = true;
      startButton.style.display = 'none';
      instructionsDiv.style.display = 'none';
      resultDiv.style.display = 'none';
      score = 0; // ゲームをリセット
      gameLoop();
    });

    // ゲームのメインループ
    function gameLoop() {
      if (isGameStarted) {
        // 青春（敵）の初期位置と速度をランダムに設定
        if (!aoseiX || !aoseiY) {
          const direction = Math.floor(Math.random() * 4); // 0から3の乱数を取得
          if (direction === 0) { // 上方向から出現
            aoseiX = Math.random() * (canvas.width - aoseiSize);
            aoseiY = 0;
            aoseiSpeedX = Math.random() * 5 + 5;
            aoseiSpeedY = Math.random() * 5 + 5;
          } else if (direction === 1) { // 右方向から出現
            aoseiX = canvas.width - aoseiSize;
            aoseiY = Math.random() * (canvas.height - aoseiSize);
            aoseiSpeedX = -(Math.random() * 5 + 5);
            aoseiSpeedY = Math.random() * 5 + 5;
          } else if (direction === 2) { // 下方向から出現
            aoseiX = Math.random() * (canvas.width - aoseiSize);
            aoseiY = canvas.height - aoseiSize;
            aoseiSpeedX = Math.random() * 5 + 5;
            aoseiSpeedY = -(Math.random() * 5 + 5);
          } else { // 左方向から出現
            aoseiX = 0;
            aoseiY = Math.random() * (canvas.height - aoseiSize);
            aoseiSpeedX = Math.random() * 5 + 5;
            aoseiSpeedY = Math.random() * 5 + 5;
          }
        }

        // 青春（敵）の移動
        aoseiX += aoseiSpeedX;
        aoseiY += aoseiSpeedY;

        // 青春（敵）が画面外に出たら再度ランダムに出現
        if (aoseiX < 0 || aoseiX > canvas.width || aoseiY < 0 || aoseiY > canvas.height) {
          aoseiX = undefined;
          aoseiY = undefined;
          score++;
        }

        // 衝突判定
        if (
          playerX < aoseiX + aoseiSize &&
          playerX + playerSize > aoseiX &&
          playerY < aoseiY + aoseiSize &&
          playerY + playerSize > aoseiY
        ) {
          isGameStarted = false;
          showResult();
        }

        // 描画
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = 'red';
        ctx.fillRect(playerX, playerY, playerSize, playerSize);

        ctx.fillStyle = 'blue'; // 青春（敵）の色を変更
        ctx.font = '20px Arial';
        ctx.fillText('春', aoseiX, aoseiY + aoseiSize);

        // スコアの表示
        ctx.fillStyle = 'black';
        ctx.font = '20px Arial';
        ctx.fillText('逃げた青春の数: ' + score, 10, 30);

        requestAnimationFrame(gameLoop);
      }
    }

    function showResult() {
      scoreDisplay.textContent = '逃げた青春の数: ' + score;
      twitterLink.href = 'https://twitter.com/intent/tweet?text=私が逃げた青春の数は' + score + 'でした！' + "%0D%0A" + 'https://vim-app.onrender.com';
      resultDiv.style.display = 'block';
      twitterLink.style.display = 'block';
    }

    const restartButton = document.getElementById('restartButton');
    restartButton.addEventListener('click', function() {
      isGameStarted = true;
      resultDiv.style.display = 'none';
      score = 0; // スコアをリセット
      aoseiX = undefined;
      aoseiY = undefined;
      playerX = canvas.width / 2 - playerSize / 2;
      playerY = canvas.height / 2 - playerSize / 2;
      gameLoop();
    });
  </script>
</body>
</html>

